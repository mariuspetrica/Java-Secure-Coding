package ro.ase.ism.sap;

public class Hello {
 
	
	
	public static String toHexString(byte value){
		String[] hexSymbols =new String[] {"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};
		//if byte is 23 -> "17"
		//if byte is 27 -> "1B"
		String hexString = "";
		while(value != 0) {
			int hexIndex = value % 16;
			hexString = hexSymbols[hexIndex] + hexString;
			//value/=16;
			//- is the slowest thing a processor can do so better use: (only when dividing by power of 2
			value = (byte) (value>>4); //faster than the division because 16 is 2^4
		}
		if(hexString.length()==0) {
			hexString = "00";
		}
		
		if(hexString.length()==1) {
			hexString = "0"+hexString;
		}
		
		return hexString;
		
	} 
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int intValue=10;
		System.out.println("byteValue is: "+ intValue);
		intValue=0x14;
		System.out.println("byteValue is: "+ intValue);
		intValue=0b00001010;
		System.out.println("byteValue is: "+ intValue);
		
		System.out.println("Hello World!");
		byte byteValue = (byte) 0b10101010;
		System.out.println("byteValue is: "+ byteValue);
		byteValue = (byte) 0xAA;
		System.out.println("byteValue is: "+ byteValue);
		byteValue = (byte) (1<<7 | 1<<5 | 1<<3 | 1<<1);
		System.out.println("byteValue is: "+ byteValue);
		byteValue = (byte) (1<<4| 1<<3| 1<<2 |1<<1);
		System.out.println("byteValue is: "+ byteValue);
		byteValue = (byte) (1<<7);
		System.out.println("byteValue is: "+ byteValue);
//check bit values in a variable:
		int JustAValue=23;
		//check 5th bit(always from right to left) in the int value:
		int mask = 0b0001_0000;
		System.out.println("byteValue is: "+ byteValue);
		//init a mask with the sign bit 1 for an integer
		int mask2 = 0b1000_0000; //this is NOT 1000....000 over 32 bits by default, this is 0000_0000_0000_0000_0000_0000_1000_0000;
		//how to do it properly:
		mask2 = 1<<31;
		System.out.println("byteValue is: "+ byteValue);
//check the bit:
		if((JustAValue & mask)!=0) {//bitwise & will return anything else than 0 only if the bits in the masks and JustAValue are both not 0
			System.out.println("The 5th bit is one!"); 
		}else {
			System.out.println("The 5th bit is not one!");
		}
//printing values in HEXA string:
		byte[] values = new byte[] {10,45,23,6,9,100}; //do not go beyond 127 cause its a signed byte array, cannot exceed 127
		
		String hexValue = "";
		for (byte value : values) {
			hexValue += (toHexString(value)+ " ");
		}
		System.out.println("The hex representation of values is "+hexValue);
		
		intValue = 34674;
		System.out.println("The hex representation using Integer class is: " + Integer.toHexString(intValue));
		byte[] byteRepresentation = new byte[Integer.BYTES];
		for(int i=0;i<byteRepresentation.length;i++) {
			byte bitMask = (byte) 0xFF;
			byteRepresentation[byteRepresentation.length - 1 -i] = 
					(byte) ((intValue >> (i*8)) & bitMask);
		}
		
	}

}
