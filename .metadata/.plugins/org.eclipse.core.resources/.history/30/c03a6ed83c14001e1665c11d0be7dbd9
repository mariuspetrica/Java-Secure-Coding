package ro.ase.ism.sap;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.KeySpec;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class exam {

	public static void printHex(byte[] values, String description) {
		System.out.println("\nHex value for: " + description);
		for(byte value : values) {
			System.out.printf("%02x",value);
		}
	}
	
	private static SecretKey generateKeyFromPassword(String password) throws Exception {
		byte[] passwordBytes = password.getBytes();
		SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
		KeySpec keySpec = new PBEKeySpec(password.toCharArray(), passwordBytes, 65536, 256);
		SecretKey secretKey = keyFactory.generateSecret(keySpec);
	
}
	
	public static void encryptCBC(
			String inputFile, String key, String algorithm, String cipherFile) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {
		
		File input = new File(inputFile);
		if(!input.exists()) {
			throw new FileNotFoundException();
		}
		
		FileInputStream fis = new FileInputStream(input);
		BufferedInputStream bis = new BufferedInputStream(fis);
		
		File output = new File(cipherFile);
		if(!output.exists()) {
			output.createNewFile();
		}
		
		FileOutputStream fos = new FileOutputStream(output);
		BufferedOutputStream bos = new BufferedOutputStream(fos);
		
		Cipher cipher = Cipher.getInstance(algorithm + "/CBC/PKCS5Padding");
		SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), algorithm);
		
		//generate a new random IV for each encryption
		SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
		byte[] IV = secureRandom.getSeed(cipher.getBlockSize());
		
		IvParameterSpec ivParameterSpec = new IvParameterSpec(IV);
		cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivParameterSpec);
		
		//write IV in the cipher file
		bos.write(IV);
		
		byte[] buffer = new byte[cipher.getBlockSize()];
		int noBytes = 0;
		byte[] cipherBuffer;
		
		while(noBytes != -1) {
			noBytes = bis.read(buffer);
			if(noBytes != -1) {
				cipherBuffer = cipher.update(buffer, 0, noBytes);
				bos.write(cipherBuffer);
			}
		}
		cipherBuffer = cipher.doFinal();
		bos.write(cipherBuffer);
		
		fis.close();
		bos.close();	
	}
	
	
	public static void main(String[] args) throws Exception {
	

        String inputFilePath  = "msg.txt";
        String outputFilePath = "enc_msg.aes"; // encrypted file
	
		File inputMessage = new File("msg.txt");
		if(!inputMessage.exists()) {
			System.out.println("The input file is missing!*******************");
		}else {
			FileReader reader = new FileReader(inputMessage);
			BufferedReader bReader = new BufferedReader(reader);
		
		String line="";
		while(line !=null) {
			line=bReader.readLine();
			if(line!=null) {
				
		//HASHING sha256
			MessageDigest messageDigestMd5 = MessageDigest.getInstance("SHA-256");
			messageDigestMd5.update(line.getBytes());
			byte[] SHA256 = messageDigestMd5.digest();
			System.out.println("SHA256 value for msg.txt is: ");
			printHex(SHA256,"SHA256 VALUE");
				} 
			}
		}
		
		String password = "passwordsecurity";
		Path inputFile = Path.of(inputFilePath);
		byte[] inputBytes = Files.readAllBytes(inputFile);
		SecretKey secretKey = generateKeyFromPassword(password);
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");

		
		byte[] iv = new byte[] { 0, 0, 0, 0, 0, (byte) 0xCC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(iv));
		
		byte[] encryptedBytes = cipher.doFinal(inputBytes);
		
		Path outputFile = Path.of(outputFilePath);
		Files.write(outputFile, encryptedBytes);
		
		System.out.println("Encryption completed successfully. Encrypted file saved as: " + outputFilePath);
}

}


